import logging

import aiosqlite
from aiogram import Bot

from keyboards.reply import cancel_kb, main_kb, to_main_kb, back_cancel_kb

from aiogram.filters import StateFilter
from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from data.connection import get_connection



# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
class ChannelSetup(StatesGroup):
    waiting_for_channel_id = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è /start
class StartMessageSetup(StatesGroup):
    waiting_for_text = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–∞–Ω–∞–ª–µ
class ChannelWelcomeSetup(StatesGroup):
    waiting_for_photo_and_text = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ –ë–î
class AddAdmin(StatesGroup):
    waiting_for_id = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
class GoodbyeMessageSetup(StatesGroup):
    waiting_for_photo_and_text = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
class PostCreation(StatesGroup):
    waiting_for_content = State()      # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
    waiting_for_button_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    waiting_for_button_url = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏

admin_router = Router()


@admin_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def menu(message: types.Message):
    user_id = message.from_user.id
    conn = await get_connection()

    try:
        conn.row_factory = aiosqlite.Row

        # 1. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with conn.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user_data = await cursor.fetchone()

        if user_data and user_data["is_admin"]:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                 reply_markup=main_kb())
        else:
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    finally:
        if conn:
            await conn.close()

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–ê ---

@admin_router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª")
async def setup_channel(message: types.Message, state: FSMContext):
    # ... (–≤–µ—Å—å –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –∫–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª–æ–º –æ—Ç–≤–µ—Ç–µ)
    conn = await get_connection()
    async with conn.execute("SELECT channel_id FROM settings LIMIT 1") as cursor:
        result = await cursor.fetchone()
    await conn.close()

    if result and result[0]:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="change_channel_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="change_channel_no")]
        ])
        await message.answer(f"–ë–æ—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞–Ω–∞–ª—É —Å ID: `{result[0]}`.\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª?", reply_markup=kb,
                             parse_mode="Markdown")
    else:
        await state.set_state(ChannelSetup.waiting_for_channel_id)
        await message.answer(
            "–ö–∞–Ω–∞–ª –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ @–±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏.")


@admin_router.callback_query(F.data == "change_channel_no")
async def cancel_change_channel(callback: types.CallbackQuery):
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.", show_alert=True)
    await callback.message.delete()


@admin_router.callback_query(F.data == "change_channel_yes")
async def start_change_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞.")
    await state.set_state(ChannelSetup.waiting_for_channel_id)
    await callback.answer()


@admin_router.message(ChannelSetup.waiting_for_channel_id)
async def process_channel_id(message: types.Message, state: FSMContext):
    if not message.text.startswith("-100") or not message.text[1:].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    channel_id = int(message.text)
    conn = await get_connection()
    await conn.execute("UPDATE settings SET channel_id = ? WHERE rowid = 1", (channel_id,))
    await conn.commit()
    await conn.close()
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ö–∞–Ω–∞–ª —Å ID `{channel_id}` —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", parse_mode="Markdown")
    await state.clear()


# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ü–†–ò /START ---

@admin_router.message(F.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start")
async def setup_start_message(message: types.Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.",
        reply_markup=cancel_kb()  # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    )
    await state.set_state(StartMessageSetup.waiting_for_text)


# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", StartMessageSetup.waiting_for_text)
async def cancel_start_message_setup(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_kb()  # <--- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
@admin_router.message(StartMessageSetup.waiting_for_text)
async def process_start_message_text(message: types.Message, state: FSMContext):
    start_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É start_message
    conn = await get_connection()
    await conn.execute("UPDATE settings SET start_message = ? WHERE rowid = 1", (start_text,))
    await conn.commit()
    await conn.close()

    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=to_main_kb()  # <--- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
    )
    await state.clear()

# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø –í –ö–ê–ù–ê–õ–ï ---

@admin_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
async def setup_channel_welcome(message: types.Message, state: FSMContext, bot: Bot):  # <--- –î–æ–±–∞–≤–∏–ª–∏ bot: Bot
    conn = await get_connection()
    conn.row_factory = aiosqlite.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫

    # 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –∏–∑ –ë–î
    async with conn.execute(
            "SELECT channel_id, welcome_message_text, welcome_message_photo_id FROM settings LIMIT 1") as cursor:
        settings = await cursor.fetchone()
    await conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∫–∞–Ω–∞–ª (—ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è)
    if not (settings and settings["channel_id"]):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="redirect_to_add_channel")]
        ])
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª.",
                             reply_markup=kb)
        return

    # 2. –ù–û–í–´–ô –ë–õ–û–ö: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    await message.answer("üîé –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")

    photo_id = settings["welcome_message_photo_id"]
    welcome_text = settings["welcome_message_text"]

    if photo_id:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_id,
            caption=welcome_text or ""  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
        )
    elif welcome_text:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(welcome_text)
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")

    # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
        reply_markup=cancel_kb()
    )
    await state.set_state(ChannelWelcomeSetup.waiting_for_photo_and_text)


# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ChannelWelcomeSetup.waiting_for_photo_and_text)
async def cancel_start_message_setup(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_kb()  # <--- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–∞–Ω–∞–ª–µ
@admin_router.message(ChannelWelcomeSetup.waiting_for_photo_and_text)
async def process_channel_welcome_content(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id if message.photo else None
    text = message.caption if message.photo else message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏ welcome_message_...
    conn = await get_connection()
    await conn.execute(
        "UPDATE settings SET welcome_message_text = ?, welcome_message_photo_id = ? WHERE rowid = 1",
        (text, photo_id)
    )
    await conn.commit()
    await conn.close()

    # –í–æ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ‚úÖ",
        reply_markup=to_main_kb()
    )
    await state.clear()

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ), –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
@admin_router.callback_query(F.data == "redirect_to_add_channel")
async def redirect_to_add_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞.")
    await state.set_state(ChannelSetup.waiting_for_channel_id)
    await callback.answer()


# --- –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---

# 1. –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def start_add_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=cancel_kb() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
    await state.set_state(AddAdmin.waiting_for_id)


# 2. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø–µ—Ä–µ–¥—É–º–∞–ª)
@admin_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", AddAdmin.waiting_for_id)
async def cancel_add_admin(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_kb()
    )


# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê
@admin_router.message(AddAdmin.waiting_for_id)
async def process_admin_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                             reply_markup=cancel_kb())
        return

    new_admin_id = int(message.text)
    conn = await get_connection()

    try:
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç.
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.
        await conn.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (new_admin_id,))

        # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await conn.execute(
            "UPDATE users SET is_admin = 1 WHERE user_id = ?",
            (new_admin_id,)
        )
        await conn.commit()

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{new_admin_id}` —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=to_main_kb()
        )

    except Exception as e:
        logging.error(f"Error while adding admin: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    finally:
        await conn.close()
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫"
@admin_router.message(F.text.startswith("–ê–≤—Ç–æ –ø—Ä–∏–µ–º –í–∫–ª.\–í—ã–∫–ª."))  # –õ–æ–≤–∏—Ç –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
async def toggle_auto_approve(message: types.Message):
    user_id = message.from_user.id
    conn = await get_connection()
    conn.row_factory = aiosqlite.Row

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        async with conn.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user_data = await cursor.fetchone()

        if not (user_data and user_data["is_admin"]):
            return  # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –º–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º

        # 2. –£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–∏–µ–º–∞
        async with conn.execute("SELECT auto_approve_enabled FROM settings LIMIT 1") as cursor:
            settings = await cursor.fetchone()

        current_status = settings['auto_approve_enabled'] if settings else 0

        # 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π (–µ—Å–ª–∏ –±—ã–ª 0, —Å—Ç–∞–Ω–µ—Ç 1; –µ—Å–ª–∏ –±—ã–ª 1, —Å—Ç–∞–Ω–µ—Ç 0)
        new_status = 1 - current_status

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("UPDATE settings SET auto_approve_enabled = ? WHERE rowid = 1", (new_status,))
        await conn.commit()

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if new_status else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"

        # –ó–∞–º–µ–Ω–∏—Ç–µ 'main_kb()' –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è
        # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ–µ –æ–±–Ω–æ–≤–∏—Ç—å/–ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        await message.answer(
            f"–†–µ–∂–∏–º –∞–≤—Ç–æ–ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: {status_text}",
           reply_markup=main_kb()
        )
    finally:
        await conn.close()

# --- –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –ü–†–ò –í–´–•–û–î–ï ---

@admin_router.message(F.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
async def setup_goodbye_message(message: types.Message, state: FSMContext, bot: Bot):
    conn = await get_connection()
    conn.row_factory = aiosqlite.Row
    async with conn.execute("SELECT * FROM settings LIMIT 1") as cursor:
        settings = await cursor.fetchone()
    await conn.close()

    # Check if a channel is linked (this logic remains the same)
    if not settings["channel_id"]:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="redirect_to_add_channel")]
        ])
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª.", reply_markup=kb)
        return

    # Display the current goodbye message
    await message.answer("üîé –¢–µ–∫—É—â–µ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:",
                         reply_markup=cancel_kb())

    photo_id = settings["goodbye_message_photo_id"]
    goodbye_text = settings["goodbye_message_text"]

    if photo_id:
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=goodbye_text or "")
    elif goodbye_text:
        await message.answer(goodbye_text)
    else:
        await message.answer("–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")

    # Request the new message
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)."
    )
    await state.set_state(GoodbyeMessageSetup.waiting_for_photo_and_text)

@admin_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", GoodbyeMessageSetup.waiting_for_photo_and_text)
async def cancel_add_admin(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_kb())


# 2. –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç
@admin_router.message(GoodbyeMessageSetup.waiting_for_photo_and_text)
async def process_goodbye_content(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id if message.photo else None
    text = message.caption if message.photo else message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
    conn = await get_connection()
    await conn.execute(
        "UPDATE settings SET goodbye_message_text = ?, goodbye_message_photo_id = ? WHERE rowid = 1",
        (text, photo_id)
    )
    await conn.commit()
    await conn.close()

    await message.answer(
        "‚úÖ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        reply_markup=main_kb() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.clear()

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª

@admin_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def start_post_creation(message: types.Message, state: FSMContext):
    # –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ –Ω—É–∂–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "–®–∞–≥ 1: –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç) –¥–ª—è –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞.",
        reply_markup=cancel_kb()
    )
    await state.set_state(PostCreation.waiting_for_content)

@admin_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", PostCreation.waiting_for_content)
async def start_post_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_kb())

# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î"
@admin_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", StateFilter(PostCreation.waiting_for_button_text, PostCreation.waiting_for_button_url))
async def back_step_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if current_state == PostCreation.waiting_for_button_url:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.")
        await state.set_state(PostCreation.waiting_for_button_text)

    # –ï—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif current_state == PostCreation.waiting_for_button_text:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç) –¥–ª—è –ø–æ—Å—Ç–∞.")
        await state.set_state(PostCreation.waiting_for_content)


@admin_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def start_post_creation(message: types.Message, state: FSMContext):
    await message.answer(
        "–®–∞–≥ 1: –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç) –¥–ª—è –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞.",
        reply_markup=back_cancel_kb()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    )
    await state.set_state(PostCreation.waiting_for_content)


# 2. –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
@admin_router.message(PostCreation.waiting_for_content, F.photo | F.text)
async def process_post_content(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id if message.photo else None
    text = message.caption if message.photo else message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    await state.update_data(photo_id=photo_id, text=text)

    await message.answer("–®–∞–≥ 2: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç').",
                         reply_markup=back_cancel_kb())
    await state.set_state(PostCreation.waiting_for_button_text)


# 3. –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
@admin_router.message(PostCreation.waiting_for_button_text)
async def process_button_text(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(
        "–®–∞–≥ 3: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É (URL), –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–Ω–æ–ø–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å https://).",
                         reply_markup=back_cancel_kb())
    await state.set_state(PostCreation.waiting_for_button_url)


# 4. –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é
@admin_router.message(PostCreation.waiting_for_button_url)
async def process_button_url(message: types.Message, state: FSMContext, bot: Bot):
    if not message.text.startswith(('http://', 'https://')):
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(button_url=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    post_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = await get_connection()
    await conn.execute(
        """UPDATE settings
           SET post_photo_id    = ?,
               post_text        = ?,
               post_button_text = ?,
               post_button_url  = ?
           WHERE rowid = 1""",
        (post_data['photo_id'], post_data['text'], post_data['button_text'], post_data['button_url'])
    )
    await conn.commit()
    await conn.close()

    # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
    await message.answer("–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç.",
                         reply_markup=cancel_kb())


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é
    preview_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=post_data['button_text'], url=post_data['button_url'])]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if post_data['photo_id']:
        await bot.send_photo(message.chat.id, photo=post_data['photo_id'], caption=post_data['text'],
                             reply_markup=preview_button)
    else:
        await bot.send_message(message.chat.id, text=post_data['text'], reply_markup=preview_button)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_post_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="send_post_cancel")]
    ])
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?", reply_markup=confirm_kb)

    await state.clear()


# 5. –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@admin_router.callback_query(F.data == "send_post_cancel")
async def cancel_post_send(callback: types.CallbackQuery):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


@admin_router.callback_query(F.data == "send_post_confirm")
async def confirm_post_send(callback: types.CallbackQuery, bot: Bot):
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await get_connection()
    conn.row_factory = aiosqlite.Row
    async with conn.execute(
            "SELECT channel_id, post_photo_id, post_text, post_button_text, post_button_url FROM settings LIMIT 1") as cursor:
        settings = await cursor.fetchone()
    await conn.close()

    if not settings or not settings['channel_id']:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    final_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=settings['post_button_text'], url=settings['post_button_url'])]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    try:
        if settings['post_photo_id']:
            await bot.send_photo(settings['channel_id'], photo=settings['post_photo_id'], caption=settings['post_text'],
                                 reply_markup=final_button)
        else:
            await bot.send_message(settings['channel_id'], text=settings['post_text'], reply_markup=final_button)

        await callback.message.edit_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –û—à–∏–±–∫–∞: {e}")

    await callback.answer()